<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>PE Tracker</title>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
  <style>
    html {
      width: 0;
      height: 0;
    }
    body {
      width: 19.5rem;
      margin: 0 auto;
      border: 1px solid red;
    }
    .header-observer {
      text-align: center;
    }
    .main-content {
      margin: auto 0;
      width: 100%;
    }
    .headers-tasks {
      position: relative;
      text-align: right;
    }
    #time-header, #quantity-header, .task-name, .task-quantity {
      margin: auto .3rem;
      padding: 1px 5px;
    }
    #time-header{
      margin-right: 0;
    }
    #quantity-header {
      margin-left: 0;
    }
    .task-name {
      margin-right: 2em;
      font-size: large;
      text-align: justify;
    }
    .task-control {
      margin: auto 7px;
      float: right;
    }
    .task-time, .task-quantity, #instructors-name, #school-name {
      background-color: rgb(211, 210, 210);
    }
    #instructors-name, #school-name {
      padding: .2em;
    }
    .task-time, .task-quantity {
      float: right;
      border: none;
    }
    .task-time {
      text-align: right;
      font-size: .96em;
      width: 3em;
    }
    input::-webkit-inner-spin-button {
      -webkit-appearance: none;
      margin: 0;
    }
    input[type=number] {
      -moz-appearance: textfield;
    }
    .task-quantity {
      padding: 1px 5px;
    }
    #buttons-section {
      text-align: center;
      margin: .7rem;
    }
    #buttons-section button {
      margin: .2rem;
    }

    @media only screen and (max-width: 400px) {
    }
  </style>
</head>
<body>
  <div class="page-content">

    <header class="header-observer">
      <h1>PE Tracker</h1>
      <h2>Observer Geraldo</h2>
      <p>Teacher-Student Instructor: <span id="instructors-name"></span></p>
      <p>School: <span id="school-name"></span></p>
      <p>Date: <span id="date"></span><input type="date" name="input-date" id="input-date" value=""></p>
    </header>

    <main class="main-content">
      
      <div class="tasks-table">
        <p class="headers-tasks"><span id="time-header">Time*</span><span id="quantity-header">#</span></p>
        <% tasks.forEach(function(r) { %>
          <div class="all-tasks" id="<%= r.id %>-parameters">
            <span class="task-id" id="<%= r.id %>-id"><%= r.id %></span><span class="task-name" id="<%= r.id %>-name"><%= r.name %></span><span class="task-quantity" id="<%= r.id %>-quantity">0</span><input type="number" class="task-time" id="<%= r.id %>-time" value="0"/><span class="task-control" id="<%= r.id %>-control" onclick="playerFunction(this, <%= r.id %>)"><i class="fa fa-play"></i></span>
          </div>
          <!-- <button id='<%= r.id %>' onClick='javascript:logTask(<%= r.id %>);'><%= r.name %></button> -->
        <% }); %>
      </div>
      <div id="buttons-section">
        <button id="btn-reset" onclick="resetTasksData()">Reset</button><br>
        <button id="btn-save" onclick="saveData()">Save Data</button><button id="btn-report">Generate Report</button>
      </div>
    </main>

    <p><i>*Time in seconds the instructor spent for each task.</i></p>
  </div>

  <script>
    let studentId;
    let taskId;
    let taskDuration;
    // Generates and pick a random Student Instructor and School
    function randomInstructorsAndSchoolsGenerator() {

      // Fetches students info from db
      studentId = "<%= studentId %>";
      let studentName = "<%= studentName %>";
      let studentSchool = "<%= studentSchool %>";

      // Displaying student instructor info
      document.querySelector("#instructors-name").innerText = studentName;
      document.querySelector("#school-name").innerText = studentSchool;
    }

    document.onload = randomInstructorsAndSchoolsGenerator();

    // Play/pause feature
    let nIntervId;
    let lastTaskPlayed;
    function playerFunction(e, taskId) {
      let player = e.querySelector('i');

      // Changes the play pause icon
      player.classList.toggle("fa-pause");

      // Triggers the timer for task and adds a quantity
      if (player.className === "fa fa-play fa-pause") {
        clearInterval(nIntervId);
        if (lastTaskPlayed !== undefined) {
          lastTaskPlayed.firstChild.className = "fa fa-play";
        }

        // Adding quantity of times that tasks was performed
        let taskQuantityElement = document.getElementById(taskId + "-quantity");
        lastTaskPlayed = document.getElementById(taskId + "-control");
        let taskQuantityValue = parseInt(taskQuantityElement.innerText);
        taskQuantityValue = taskQuantityValue + 1;
        taskQuantityElement.innerText = taskQuantityValue;

        startTimer(taskId);

      } else {
        // Pause current timer running
        clearInterval(nIntervId);
      }

      // Starts timer counter for last task played
      function startTimer(taskId) {
        nIntervId = setInterval(function(){
          let taskTimeElement = document.getElementById(taskId + "-time");

          // Make sure value of time is always 0;
          if (taskTimeElement.value === "") {
            taskTimeElement.value = 0;
          }
          
          let taskTimeValue = parseInt(taskTimeElement.value);
          taskTimeValue = taskTimeValue + 1;
          taskTimeElement.value = taskTimeValue;
        }, 1000);
      }
    }

    // Reset values on UI without submiting it
    function resetTasksData() {
      clearInterval(nIntervId);
      let timeInputs = document.querySelectorAll(".task-time");
      timeInputs.forEach(tag => {
        tag.value = 0;
      })

      let quantityTags = document.querySelectorAll(".task-quantity");
      quantityTags.forEach(tag => {
        tag.innerText = "0";
      })

      let controlTags = document.querySelectorAll(".task-control");
      controlTags.forEach(player => {
        player.firstChild.className = "fa fa-play";
      });
    }

    // Seves data on db
    function saveData() {
      let confirmDataSubmission = confirm("Are you sure you save and to submit the data?")

      if (confirmDataSubmission) {

        let allTasksTags = document.querySelectorAll('.all-tasks')
        
        // Getting current values for each tag
        allTasksTags.forEach(taskTag => {
          let selectTaskId = taskTag.querySelector(".task-id");
          let getTaskTime = taskTag.querySelector(".task-time");
          if(getTaskTime.value < 10 ) {
            taskDuration = "0" + getTaskTime.value;
          } else {
            taskDuration = getTaskTime.value;
          }
          taskId = parseInt(selectTaskId.innerText);
          
          logTask(taskId, taskDuration);
        });
      }
    }

    document.getElementByClassName
    // Backend code with db and node.js
    let currentTaskId = null;
    const logTask = async function(taskId, taskDuration) {
      const response = await fetch('/log', {
        method: 'POST',
        headers: {
          'Accept': 'application/json',
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          user_id: -1,
          students_id: studentId,
          tasks_id: taskId,
          duration: "'+" + taskDuration + "'"
        })
      });
      const result = await response.text();
      console.log(result);
      currentTaskId = taskId;
    };
  </script>
</body>
</html>